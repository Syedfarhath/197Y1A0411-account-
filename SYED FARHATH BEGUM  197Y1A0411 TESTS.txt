Given arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required
for the railway station so that no train is kept waiting.
Consider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same 
for a train but we can have arrival time of one train equal to departure time of the other. At any given instance of time , same
platform can not be used for both departure,arrival of the train. in such cases, we need different platforms.
Ex-1:
Input 1: n=6
arr[] = {0900 ,0940,0950,1100,1500,1800}
dep[] = {0910,1200,1120,1130,1900,2000}
output: 3 (Minimum 3 platforms are required)

arr[] ={100,300,500}
dep[] ={900,400,600} 
op-2 platforms
using System;
public class Test
{
	public static void Main()
	{
		int ip1 = Convert.ToInt32(Console.ReadLine());
		int[] arr= Array.ConvertAll(Console.ReadLine().Split(' '),(item) => Convert.ToInt32(item));
		int[] dep= Array.ConvertAll(Console.ReadLine().Split(' '),(item) => Convert.ToInt32(item));
		int pf=1,res=1;
		for(int i=0;i<ip1;i++){
		    pf=1;
		    for(int j=0;j<ip1;j++){
		        if(i!=j){
		            if(arr[i]>=arr[j] && dep[j]>=arr[i]){
		                pf++;
		            }
		        }
		    }
		    res=Math.Max(res,pf);
		}
		Console.WriteLine(res);
	}
}



Nth character in decrepted string:
Every character in the input string is followed by its frequency.
Write a function to decrypt the string and find the n0' character of the decrypted string.
If no character exsists at the position then return "-1". For eg- if the input 
striing is "a2b3" the decrypted string is "aaabb"
i/p:
input1: a string
input 2: n , the position of the character starting from 1
O/p:
Nth position character else -1
ex1:
ip1=a1b1c3
ip2=5
o/p=c 
ex2:
ip1=a3b2
ip2=7
o/p=-1
using System;
public class Test
{
	public static void Main()
	{
	  string input1 = Console.ReadLine();
      int input2 = Convert.ToInt32(Console.ReadLine());
      String expand = "";
      String str= "";
      int f= 0;
      for(int i=0;i<input1.Length;)
        {
            str="";
            f=0; 
            while (i<input1.Length && input1[i]>='a'&& input1[i]<='z')
            {
                str+=input1[i];
                i++;
            }
            while(i<input1.Length && input1[i] >='1'&& input1[i]<='9')
            {
                f=f*10+input1[i]-'0';
                i++;
            }
            for (int j=1;j<=f;j++){
                expand += str;
            }
        }
        if(f==0)
            expand+= str;
        if(input2>expand.Length)
            Console.WriteLine("-1");
        else
            Console.WriteLine(expand[input2 - 1]);
	}
}


Replace every character with a next 3rd character in the string
inp1: abcd
oup1: defg
inp2:xza
oup2:acd
using System;
public class Test
{
	public static void Main()
	{
	  string input1 = Console.ReadLine();
	  string n="";
	  for(int i=0;i<input1.Length;i++){
	      n+="3";
	  }
	  string t = "";
      for (int i = 0;i<input1.Length; i++) {
      int a =(int)(input1[i] - '0');
      int b =(int)(n[i]+a);
      if (b > 122)
        b -= 26;
      char x = (char)b;
      t +=x;
    }
    Console.WriteLine(t);
	}
}


Minimum operations required to return to main folder
John is working on a complex project. The main project directory 
has many nested directories. I.e directory inside a directory.Duw to the complexity
has to change the directory every time he has to work on a different modules.
Sometimes he does not remember in which directory he is working and how
to go back to the main directory.-root directory
Write a program which would find the minimum steps required to go 
back to the main directory from the current directory given the sequence of
operations performed by join after entering the root directory.
Jon can perform the following operations:
1."../": Moves to the parent folder of the current folder. 
(If current folder is the main it stays in the same folder)
2."./":Remains in the same folder.
3."F/": Moves to the child folder named F.
Input 1- 6
Input 2- arr[] = {"F1/","F2/","./","F3/","../","F31/"}
Output - 3
using System;
public class Test
{
	public static void Main()
	{
	    int n = Convert.ToInt32(Console.ReadLine());
		String line = Console.ReadLine();
		string[] a =line.Split(',');
		int count=0;
		for(int i=0;i<n;i++){
		    if(a[i]=="./"){
		        count=count + 0;
		    }
		    else if(a[i]=="../"){
		        count=count-1;
		    }
		    else{
		        count=count+1;
		    }
		}
		Console.WriteLine(count);
	}
}